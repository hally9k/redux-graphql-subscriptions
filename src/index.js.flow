// @flow
export type SubscriptionPayload = {
    key: string,
    onError: (payload: Array<GraphQLError>) => ReduxAction<Array<GraphQLError>>,
    onMessage: (payload: GraphQLResponse) => ReduxAction<GraphQLResponse>,
    onUnsubscribe: (payload: string) => ReduxAction<string>,
    query: string,
    variables?: {}
}

export type ReduxActionIn =
    | ReduxAction<SubscriptionPayload>
    | ReduxAction<string>

export type ReduxActionOut =
    | ReduxAction<GraphQLResponse>
    | ReduxAction<Array<GraphQLError>>
    | ReduxAction<any>

export type WsClientStatusMap = {
    CLOSED: 3,
    CLOSING: 2,
    CONNECTING: 0,
    OPEN: 1
}

declare var WS_CLIENT_STATUS: WsClientStatusMap

declare function createMiddleware<AppState>(
    url: string,
    options: {
        connectionOptions?: {},
        reconnect?: boolean
    }
): ReduxMiddleware<AppState, ReduxActionIn, ReduxActionOut>

declare function connect(): ReduxAction<*>

declare function disconnect(key: string): ReduxAction<string>

declare function subscribe(
    payload: SubscriptionPayload
): ReduxAction<SubscriptionPayload>

declare function unsubscribe(payload: string): ReduxAction<string>

export {
    createMiddleware,
    subscribe,
    unsubscribe,
    connect,
    disconnect,
    WS_CLIENT_STATUS
}
