// @flow
/*  eslint-disable no-unused-vars */

// GraphQL
export type GraphQLError = {
    id?: string,
    message: string,
    request?: *,
    type: string
}

export type GraphQLResponse = {
    data: *,
    error?: Array<GraphQLError>
}

// Redux
type DispatchAPI<A> = (action: A) => A
type Dispatch<A: { type: $Subtype<string> }> = DispatchAPI<A>

type MiddlewareAPI<S, A, D = Dispatch<A>> = {
    dispatch: D,
    getState(): S
}

// State = Application State
// IA = InputAction
// OA = OutputAction
// ID = InputDispatch
// OD = OutputDispatch

type ReduxMiddleware<S, IA, OA = IA, ID = Dispatch<IA>, OD = Dispatch<OA>> = (
    api: MiddlewareAPI<S, OA>
) => (next: ID) => ID

// P = Payload
// M = Meta
type ReduxAction<P = {}, M = {}> = {
    error?: boolean,
    meta?: M,
    payload?: P,
    type: string
}

// Exported Types
// Exported Types
export type SubscriptionPayload = {
    key: string,
    onError?: (payload: GraphQLError) => ReduxAction<*> | Array<ReduxAction<*>>,
    onMessage: (payload: GraphQLResponse) => ReduxAction<*> | Array<ReduxAction<*>>,
    onUnsubscribe?: (payload: string) => ReduxAction<*> | Array<ReduxAction<*>>,
    query: string,
    variables?: {}
}
export type WsClientStatusMap = {
    CLOSED: 3,
    CLOSING: 2,
    CONNECTING: 0,
    OPEN: 1
}

// Internal Types
type ReduxActionIn = ReduxAction<SubscriptionPayload> | ReduxAction<string>

type ReduxActionOut =
    | ReduxAction<GraphQLResponse>
    | ReduxAction<Array<GraphQLError>>
    | ReduxAction<any>

// Module
declare var WS_CLIENT_STATUS: WsClientStatusMap

declare function createMiddleware<AppState>(
    url: string,
    options: {
        connectionOptions?: {},
        reconnect?: boolean
    },
    protocols?: string | Array<string>
): ReduxMiddleware<AppState, ReduxActionIn, ReduxActionOut>

declare function connect(): ReduxAction<*>

declare function disconnect(): ReduxAction<*>

declare function subscribe(
    payload: SubscriptionPayload
): ReduxAction<SubscriptionPayload>

declare function unsubscribe(key: string): ReduxAction<string>

export {
    createMiddleware,
    subscribe,
    unsubscribe,
    connect,
    disconnect,
    WS_CLIENT_STATUS
}
